#!/bin/bash
###
### UserPromptSubmit Hook - Save user prompts to CSV or handle feedback
###

# Read input data (passed as JSON via stdin)
INPUT=$(cat)

# Extract necessary information
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
# Use session_id passed from Claude
SESSION_ID=$(echo "$INPUT" | node -pe "JSON.parse(require('fs').readFileSync(0, 'utf8')).session_id || ''" 2>/dev/null || echo "")
if [ -z "$SESSION_ID" ]; then
    SESSION_ID=$(uuidgen | tr '[:upper:]' '[:lower:]')
fi
PROJECT_PATH=$(pwd)

# Extract user_prompt from JSON (use jq, fallback to Node.js if not available)
if command -v jq &> /dev/null; then
    USER_PROMPT=$(echo "$INPUT" | jq -r '.user_input // .prompt // ""' 2>/dev/null || echo "")
else
    # Parse with Node.js if jq is not available
    USER_PROMPT=$(echo "$INPUT" | node -pe "const data=JSON.parse(require('fs').readFileSync(0, 'utf8')); data.user_input || data.prompt || ''" 2>/dev/null || echo "")
fi

# Use entire stdin if prompt is empty
if [ -z "$USER_PROMPT" ]; then
    USER_PROMPT="$INPUT"
fi

# Project ccptracker directory path
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CCPTRACKER_DIR="$(dirname "$SCRIPT_DIR")"

# Session information file
SESSION_FILE="$CCPTRACKER_DIR/temp/current-session.json"

# Check feedback pattern (numbers 1-5 only)
TRIMMED_PROMPT=$(echo "$USER_PROMPT" | xargs)

# Debug log
{
    echo "=== User Prompt Submit Debug ==="
    echo "Time: $(date '+%Y-%m-%d %H:%M:%S')"
    echo "USER_PROMPT: [$USER_PROMPT]"
    echo "TRIMMED_PROMPT: [$TRIMMED_PROMPT]"
    echo "Pattern match: $([[ "$TRIMMED_PROMPT" =~ ^[1-5]$ ]] && echo 'YES' || echo 'NO')"
    echo "SESSION_FILE exists: $([ -f "$SESSION_FILE" ] && echo 'YES' || echo 'NO')"
    if [ -f "$SESSION_FILE" ]; then
        echo "SESSION_FILE content:"
        cat "$SESSION_FILE"
    fi
    echo ""
} >> "$CCPTRACKER_DIR/logs/user-prompt-submit-debug.log"

if [[ "$TRIMMED_PROMPT" =~ ^[1-5]$ ]]; then
    # Check previous session information
    if [ -f "$SESSION_FILE" ]; then
        PREV_SESSION_ID=$(node -pe "JSON.parse(require('fs').readFileSync('$SESSION_FILE', 'utf8')).session_id" 2>/dev/null)

        {
            echo "PREV_SESSION_ID: [$PREV_SESSION_ID]"
        } >> "$CCPTRACKER_DIR/logs/user-prompt-submit-debug.log"

        if [ -n "$PREV_SESSION_ID" ]; then
            # Save feedback
            node "$SCRIPT_DIR/csv-updater.js" update-satisfaction "$PREV_SESSION_ID" "$TRIMMED_PROMPT" "" > /dev/null 2>&1

            {
                echo "Satisfaction saved for session: $PREV_SESSION_ID"
            } >> "$CCPTRACKER_DIR/logs/user-prompt-submit-debug.log"

            # Delete session information
            rm -f "$SESSION_FILE"

            # Block Claude call completely and show message only
            cat << EOF
{
  "decision": "block",
  "reason": "✅ Satisfaction rating saved ($TRIMMED_PROMPT/5)"
}
EOF
            exit 0
        fi
    else
        # Show guidance message and block if no session file
        {
            echo "No session file - feedback ignored"
        } >> "$CCPTRACKER_DIR/logs/user-prompt-submit-debug.log"

        cat << EOF
{
  "decision": "block",
  "reason": "⚠️ No conversation to rate. Please enter a question first."
}
EOF
        exit 0
    fi
fi

# Handle regular prompt: save session information to temporary file
cat > "$SESSION_FILE" << EOF
{
  "session_id": "$SESSION_ID",
  "timestamp": "$TIMESTAMP",
  "project_path": "$PROJECT_PATH"
}
EOF

# Add new row to CSV
node "$SCRIPT_DIR/csv-updater.js" add "$SESSION_ID" "$TIMESTAMP" "$PROJECT_PATH" "$USER_PROMPT"

exit 0
